####一些常见排序
1. [冒泡排序](#bubbleSort)
2. [选择排序](#selectionSort)
3. [插入排序](#insertSort)
4. [桶排序](#bucketSort)
5. [快速排序](#quickSort)

准备
---
1. 先写一个打印输出的方法，用于调试。

    ```php
    <?php
        function p($msg) {
            echo '<pre style="color:red;">';
            print_r($msg);
        }
    ?>
    ```

2. 一个需要排序的数组。

    ```php
    <?php
        $arr = [3, 5, 2, 8, 7, 1, 2, 4];
    ?>
    ```


<h2 id="bubbleSort">I. 冒泡排序(BubbleSort)</h2>

###What?
什么是冒泡排序呢？

顾名思义，像水里一长串上浮的泡泡，一个个的冒出水面，而且每次冒出水面的泡泡都是最大的。

冒泡排序也是不断地将最大的数找出来移到最后它们应该在的位置上；

但是如何让它具有冒泡的效果呢？这就体现在移的过程中。通过相邻两数的比较，将大的数放在后面，这样就能够像冒泡一样，将最大数移到最后的位置上。

```php
<?php
    // &$arr，使用&，这是因为像冒泡那样比较移动都是发生在该数组中的，所以应该直接操作原数组，使用地址符'&'
    function bubbleSort(&$arr) {
        $temp;
        $count = count($arr);
        // 这是外层循环，用来控制冒出水面泡泡的数量，即找到多少个最大数
        // 如果有5个数，我们只要找出4个最大的就可以了，剩下的必然最小，所以$i < $count - 1
        for ($i = 0; $i < $count - 1; ++ $i) {
            // 这里是内层循环，用来将两个相邻的数进行比较
            // 如果前面的数大于后面的数，就交换它们的位置
            // 这样一步步交换移动，可以将最大数浮出水面(移动最后)

            // 为什么是$count-1-$i ?
            // 如果有5个数，两个相邻数比较的次数为4次
            // 当找到一个最大数后，只剩4个数时，两两相较的次数变为3次
            for ($j = 0; $j < $count - 1 - $i; ++$j) {
                // 两两相较
                // 当前面的数较大时，需交换这两个数
                if ($arr[$j] > $arr[$j+1]) {
                    $temp = $arr[$j];
                    $arr[$j] = $arr[$j + 1];
                    $arr[$j + 1] = $temp;
                }
            }
        }
    }
    // =========================================
    // 总结：
    // 冒泡排序有两层循环
    // 外层控制找最大数的个数，记得只需找 $count-1 个就OK了
    // 内层控制是为浮出一个最大数，而从头开始的两个相邻数之间比较的次数。在10个数中两两相较的次数为9次
    // 判断大数在前时，就交换两数。
    //
    // 冒泡 = 控制找最大数次数的外层循环
    //          +   控制为找出最大数而两两相较次数的内层循环
    //              +   判断大数在前时的交换
?>
```

去掉邪恶的注释后的精简版：

```php
<?php
    function bubbleSort(&$arr) {
        $temp;
        $count = count($arr);
        for ( $i = 0; $i < $count - 1; ++$i ) {
            for ( $j = 0; $j < $count - 1 - $i; ++$j ) {
                if ( $arr[$j] > $arr[$j + 1] ) {
                    $temp = $arr[$j];
                    $arr[$j] = $arr[$j + 1];
                    $arr[$j + 1] = $temp;
                }
            }
        }
    }
?>
```


<h2 id="selectionSort">II. 选择排序(SelectionSort)</h2>

###What?
有点类似于冒泡，不同点是，在得出最大数的方法上，一个是比较交换的方式(冒泡)
，一个是比较赋值的方式(选择)，选择排序优于冒泡排序，因为不需要频繁的交换

选择排序，需要遍历所有数，并使用两个临时变量分别记录当前最大的数及这个最大数的索引，若后面有大于这个临时变量的值的数，就将这个大数赋值给临时变量同时记录索引

遍历到最后，两个临时变量中存储的将是最大数和最大数的索引，将它与最后位置的数进行交换

```php
<?php
    function SelectionSort(&$arr) {
        $temp; // 保存临时最大数的值
        $index; // 保存临时最大数的索引
        $count = count($arr);
        // 找最大数的个数
        for ( $i = 0; $i < $count - 1; ++$i ) {
            $temp = $arr[0]; // 第1个数时，将临时最大数设为它自己
            $index = 0;

            // 遍历比较剩余的所有数，每找出一个最大数，剩余数就减1
            // 因为将第1个数假定为临时最大数，所以从第二个数(索引为1)比较
            for ( $j = 1; $j < $count - $i; ++$j ) {
                if ( $temp < $arr[$j] ) {
                    $index = $j;
                    $temp = $arr[$j];
                }
            }
            // 将最大数与最后面的数交换位置
            // 最后的数如果跟这个临时最大数一样就不需要互换位置
            // 这里的交换原则中，已经有了第一句：$temp = $arr[$index]
            if ($temp != $arr[$count - $i - 1]) {
                $arr[$index] = $arr[$count - $i - 1];
                $arr[$count - $i - 1] = $temp;
            }
        }
    }

    // ==================================================
    // 总结：
    // 选择排序有两层循环
    // 外层循环控制找最大数的个数
    // 内层循环控制遍历所有的剩余数
    // 在内层循环遍历所有剩余数之前，将第一个剩余数的值和位置设为临时最大值及其索引
    // 内存循环遍历好后，临时变量中已经保存了最大数和它的索引
    // 判断最后位置的数跟最大数是否一致，不一致就交换它们。

    // 选择排序  =  控制找最大数的个数的外层循环
    //              +   初始化临时最大值$temp=$arr[0] 和 临时最大值的索引$index=0
    //              +   遍历剩余最大数的内存循环，跳过第一个数(索引0)
    //                  +   判断当前遍历的数大于临时最大数，就复制给临时最大数，并记录索引
    //              +   最大数与末尾数不一致时交换两数
?>
```

无注释精简版：

```php
<?php
    function selectionSort(&$arr) {
        $temp;
        $index;
        $count = count($arr);
        for ( $i = 0; $i < $count - 1; ++$i ) {
            $temp = arr[0];
            $index = 0;
            for ( $j = 1; $j < $count - $i; ++$j ) {
                if ( $temp < $arr[$j] ) {
                    $temp = $arr[$j];
                    $index = $j;
                }
            }
            if ( $temp != $arr[$j-1] ) {
                $arr[$index] = $arr[$j-1];
                $arr[$j-1] = $temp;
            }
        }
    }
?>
```


<h2 id="insertSort">III. 插入排序(InsertSort)</h2>

###What?
插入排序，就像小时候上学排座位表一样，老师会让同学们排队，按高个子在后，小个子在前的规则站队。当老师挑出一个站在后面的个矮的同学让他站到队伍的合适的位置去时，这个同学就被插入到队伍中，当他插入队伍时，本来在他前面的所有人都要后移，这样才能在前面给他留下空位。

插入排序，会从前往后遍历每一个数，并将遍历到的数插入到从第1个数到这个数之间的合适的位置上。

每遍历到一个数之前它前面的所有数都是规则的。

这有点像站队时，先有一个同学站到最前面排队，然后又有一个同学过来排队，如果后来的同学个子矮于第一个同学，就站出队伍，要求第一个同学往后站一个位置，这个同学就能够插入到第一个位置上了。对于第三个排队的同学来说，他前面的队伍是有序的，他只要找到自己的位置插进去就好。

```php
<?php
function insertSort(&$arr) {
    $temp;
    $index; // 合适的位置
    $count = count($arr);
    // 第一个数是不需要找合适的位置的
    for ( $i = 1; $i < $count; ++$i ) {
        $index = 0; // 默认合适的位置为第一个，因为有可能比较所有前面的数均没找到比它小的
        // 判断当前数的位置是否合适
        // 因为它前面所有的数都是有序的，所以只需跟它前面的数比较
        // 若小于它前面的数，则位置不合适，需要插入到合适的位置上
        // 大于它前面的数，则位置合适，不需要做任何动作
        if ( $arr[$i] < $arr[$i - 1] ) {
            // 通过跟前面数的比较发现位置不合适后，则往前一位比较
            // 直到找到有一个数小于它，那这个数合适的位置就是这个小于它的数的后面。
            $temp = $arr[$i]; // 保存要插入的值
            for ( $j = $i - 2; $j >= 0; --$j ) {
                if ( $arr[$j] < $temp ) {
                    $index = $j + 1;
                    break;
                }
            }
            // 将这个合适位置到原位置前一位的所有数都后移一位
            // 然后将这个数的值赋到(插入)合适的位置上
            // 后移的动作是从后往前的
            for ( $k = $i - 1; $k >= $index; --$k ) {
                $arr[$k + 1] = $arr[$k];
            }
            $arr[$index] = $temp;
        }
    }

    // =======================================================
    // 总结：
    // 插入排序是为每个遍历到的数找到它在它前面的有序集合中的位置。
    // 一层循环用来遍历所有数，可以跳过第1个数
    // 判断是否需要找合适的位置，若需要就找到这个合适的位置
    // 将这个合适位置到这个数原位置前面一位的所有数后移1位。
    // 插入这个数到合适的位置上去

    // 插入排序  =  遍历所有数的一层循环
    //              +   该数的位置是否不合适的判断
    //                  +   为找合适的位置的倒序遍历循环
    //                      +   比较得出合适位置后结束上层循环
    //                  +   后移1位合适位置到该数原位置前1位之间所有数的循环
    //                  +   将该数插入到这个合适位置
}
?>
```

去掉注释的版本：

```php
<?php
    function insertSort(&$arr) {
        $temp;
        $index;
        $count = count($arr);
        for ( $i = 1; $i < $count; ++$i ) {
            $index = 0;
            if ( $arr[$i] < $arr[$i - 1] ) {
                $temp = $arr[$i];
                for ( $j = $i - 2; $j >= 0; --$j ) {
                    if ( $arr[$j] < $temp ) {
                        $index = $j + 1;
                        break;
                    }
                }
                for ( $k = $i - 1; $k >= $index; --$k ) {
                    $arr[$k + 1] = $arr[$k];
                }
                $arr[$index] = $temp;
            }
        }
    }
?>
```

<h2 id="bucketSort">IV. 桶排序(BucketSort)</h2>

假设我们有很多硬币，这些硬币中有1分、2分、5分、1角、5角和1元的，每种硬币的数量都很大，这时候需要排序这些硬币你会怎么做？

我们一般的做法是将这些硬币先按面额整理区分开来，喜欢有点情调的话，我们会把相同面额的硬币摞起来，这时的形状看起来就是一个个的桶子(圆柱)。

现在再让我们排序这些整理好的硬币，是不是非常容易了。

桶排序的使用比较受限制，一般不要用于最大数与最小数间隔过大的情况下，不然形成桶子的数量将会非常大，十分占用内存。也不建议使用在数据比较稀疏的情况下。

桶排序，在一些合适的情况下，速度是非常快的。

```php
<?php
// 桶排序不是对原数组进行操作，所以不使用地址符
function bucketSort($arr) {
    $count = count($arr);
    $max = $min = $arr[0]; // 初始化最大最小数都为第一个元素值
    // 遍历数组得到最大最小值
    for ( $i = 1; $i < $count; ++$i ) {
        if ( $arr[$i] > $max ) {
            $max = $arr[i];
        } else if ( $arr[$i] < $min ) { // 使用else if可以减少判断次数
            $min = $arr[$i];
        }
    }

    // 制作桶子的对照值，就如面额一样
    $bucket = array_fill($min, $max - $min + 1, 0);
    // 遍历所有数，将数的个数记录到桶子上
    for ( $i = 0; $i < $count; ++$i ) {
        ++ $bucket[$arr[$i]];
    }

    $result;
    // 遍历桶子形成一个数组
    for ( $i = $min; $i <= $max; ++$i ) {
        // 当$bucket[$i]的值不为0，就添加$bucket[$i]个$i
        for ( $j = 0; $j < $bucket[$i]; ++$j ) {
            $result[] = $i;
        }
    }
    return $result;

    // ======================================================
    // 总结：
    // 找出这个数组中的最大数和最小数
    // 制作一个从最小数到最大数的桶子对照值的集合
    // 遍历数组，将元素的值放到桶子上，形成一个个桶子
    // 遍历桶子对照值的集合，找出真正的桶子(值大于0)
    // 往结果集中放入桶子中的值一般个数的对照值

    // 桶排序   =   一次找最大最小数的遍历循环
    //          +   制作从最小数到最大数的桶子对照值的集合
    //          +   再一次遍历循环，用于将数组的值填入桶子对照值集合中
    //          +   遍历桶子对照集合，找出真正的桶子
    //              + 往结果集中放入桶子值个数的对照值
}
?>
```

无注释精简版：

```php
<?php
    function bucketSort($arr) {
        $count = count($arr);
        $max = $min = $arr[0];
        for ( $i = 1; $i < $count; ++$i ) {
            if ( $arr[$i] > $max ) {
                $max = $arr[$i];
            } else if ( $arr[i] < $min ) {
                $min = $arr[$i];
            }
        }
        $bucket = array_fill($min, $max - $min + 1, 0);
        for ( $i = 0; $i < $count; ++$i ) {
            ++ $bucket[$arr[$i]];
        }
        $result;
        for ( $i = $min; $i <= $max; ++$i ) {
            for ( $j = 0; $j < $arr[$i]; ++$j ) {
                $result[] = $i;
            }
        }
        return $result;
    }
?>
```

<h2 id="quickSort">V. 快速排序(QuickSort)</h2>

###基本思想
快排基于算法中很重要的思想就是分治。简单地说，分治就是分而治之，大事化小，把复杂的问题分为多个简单的问题，解决了这个简单问题，事情也就很容易的解决了。

###如何分治
分解问题：将原问题分为一系列的子问题
解决子问题：递归解决子问题。如果子问题足够小，直接解决子问题
合并问题：将子问题的结果合并为原问题

###分治现实中的例子
一个国家，由主席、总理两个人这是完全治理不过来的，所以将国家又分成了很多的省和直辖市，但是靠各位省长治理一省，那也是不可能的；这样省又划分了好多市，市长同样不能够一个人治理一个市，...一直到村长，这才是一个人可以治理的范围。所以村长管理好了所有的村，那乡长就治好了乡，所有乡长镇长治好了乡镇，那么就是县长治好了县,...所有的省长都治好了省，那一个国家就被治理好了。这就是分治思想在现实生活中的例子。

###在排序中如何分治
首先我们需要一个数作为参考标志，可以是数组中的任意数，但是一般我们使用第一个数作为参考标志，因为第一个数也具有不确定性。然后遍历这个数组，将它分成一个小于它的数的集合和一个大于等于它的数的集合；再来为每个集合找一个标志，形成它们的两个集合(小于标志数的集合和大于等于标志数的集合)...一直到形成的集合只有一个数或没有数。

###分治排序的例子
还是排队，高个子在后，小个子在前。我们以第一人作为标志，身高低于他的站在他前面，身高高于或等于他的站在他后面，这样再在身高低于他的所有人中和高于等于他身高的人中，分别找一个标志，再如此比较站队...最后的队伍一定是有序的。

###分治排序的演示

```
3, 5, 2, 8, 7, 1, 2 // 原始数组
[2, 1, 2], 3, [5, 8, 7] // 以第一个数3作为标志，形成的小于和大于等于它的两个集合
[[1], 2, [2]], 3, [[], 5, [8, 7]] // 再对集合中的数以它们各自的第一个数做标志形成小于和大于等于的两个集合
[[1], 2, [2]], 3, [[], 5, [[7], 8, []]]] // 只有[8, 7]这个集合还需要分治，其它集合只有1个或没有元素
1, 2, 2, 3, 5, 7, 8 // 此时返回分治的结果，就是已经排序好的数组了
```

```php
<?php
function quickSort($arr) {
    $count = count($arr);
    // 当数组元素的数量为0或1时，返回数组
    if ( $count == 0 || $count == 1 ) {
        return $arr;
    }
    $flag = $arr[0];
    $smaller = $larger = []; // 两个集合
    for ( $i = 1; $i < $count; ++$i ) {
        if ( $arr[$i] < $flag ) {
            $smaller[] = $arr[$i];
        } else {
            $larger[] = $arr[$i];
        }
    }
    // 返回小于标志的集合分治结果、标志、大于等于标志的集合分治结果的合并集合
    return array_merge(quickSort($smaller), [$flag], quickSort($larger));
}
?>
```

形成小于、等于、大于参考数的集合的做法：(重复数多的情况下这种做法应该更好)

```php
<?php
    function quickSort($arr) {
        $count = count($arr);
        if ( $count == 0 || $count == 1 ) {
            return $arr;
        }
        $flag = $arr[0];
        $smaller = $larger = $equal = []; // 3个集合
        for ( $i = 1; $i < $count; ++$i ) {
            if ( $arr[$i] < $flag ) {
                $smaller[] = $arr[$i];
            } else if ( $arr[$i] == $flag ) {
                $equal[] = $arr[$i];
            } else {
                $larger[] = $arr[$i];
            }
        }
        return array_merge(quickSort($smaller), [$flag], $equal, quickSort($larger));
    }
?>
```