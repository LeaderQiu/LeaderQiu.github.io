####PCRE正则语法
1. [界定符(Delimiters)](#delimiters)
2. [原子(Atom)](#atom)
3. [元字符(Meta-characters)](#meta-characters)
4. [字符类(Character classes)](#character_classes)
5. [量词/重复(Repetition)](#repetition)
6. 边界控制
7. [子组/子表达式(Subpatterns)](#subpatterns)
8. 模式单元

####PCRE函数
1. [preg_quote](#preg_quote) - 转义正则表达式字符
2. [preg_filter](#preg_filter) - 执行一个正则表达式搜索和替换
3. [preg_grep](#preg_grep) - 返回匹配模式的数组条目
4. [preg_match](#preg_match) - 执行一个正则表达式匹配
5. [`preg_match_all`](#preg_match_all) - 执行一个全局正则表达式匹配
6. [preg_replace](#preg_replace) - 执行一个正则表达式的搜索和替换
7. [preg_split](#preg_split) - 通过一个正则表达式分隔字符串

一些准备
---
1. 正则测试工具：**regexpal**

    你可能想用一下正则测试工具，所以写了这么一项准备。在regexpal中书写正则的时候，不需要使用界定符。

2. 为了方便PHP打印，准备一个简便的输出函数

    ```php
    <?php
        function p($msg) {
            echo '<pre style="color:red;">';
            print_r($msg);
        }
    ?>
    ```


<h2 id="delimiters">界定符(Delimiters)</h2>

也叫分隔符，表示一个正则表达式的开始和结束。

分隔符可以使用任意_非字母数字_、_非反斜线_、_非空白字符_。

经常使用的分隔符是正斜线'/'，hash符号'#'，以及取反符号'~'。

这些都是合法的分隔符：`/[0-9]/`，`#[0-9]#`，`%[0-9]%`，`+[0-9]+`， `{[0-9]}`

如果分隔符需要在模式内进行匹配，它必须使用反斜线进行转义：`/http:\/\//` - '\/'表示在模式内匹配一个'/'

更好地选择是换一个分隔符来使用：`#http://#`，这样可读性更好

###示例

```php
<?php
    $subject = '2fun3d';
    $pattern = '#[0-9]#';
    preg_match_all($pattern, $subject, $matches);
    p($matches); // [['2', '3']]

    $pattern = '{[0-9]}';
    preg_match_all($pattern, $subject, $matches);
    p($matches); // [['2', '3']]

    // 下面的写法是错误的: 没有结束匹配标志'}'
    $pattern = '{[0-9]{';
    preg_match_all($pattern, $subject, $matches)
?>
```

<h2 id="atom">原子(Atom)</h2>

###可见原子
Unicode编码表中用键盘输出后肉眼可见的字符

有哪些？
* 标点; " _ ? . 等等
* 英文大小写字母和数字 a-z,A-Z,0-9
* 汉字、日文、阿拉伯文等其他语言文字
* ∑,∮,∈,≌等数理化公式符号
* 其他可见字符

###不可见原子
Unicode编码表中用键盘输出后肉眼不可见的字符

有哪些？
* 换行符 \n
* 回车 \r
* 制表符 \t
* 空格
* 其它不可见符号

匹配汉字时，可能会遇到由编码格式引发的错误

**站长之家**有可用的汉字转Unicode编码工具，可以直接将汉字转为Unicode

一些需要转移的符号：\，$，!，(，+，*，.，^等等，使用时需要加一个'\'来转义

###原子的集合
|元字符 |描述 |
|:---:|:---|
|. |匹配除换行符之外的任意字符 |
|\d |匹配任意一个十进制数字，即[0-9] |
|\D |匹配任意一个非十进制数字，即[^0-9] |
|\s |匹配一个不可见原子，即[\f\n\r\t\v] |
|\S |匹配一个可见原子，即[^\f\n\r\t\v] |
|\w |匹配任意一个数字、字母或下划线，即[0-9a-zA-Z_] |
|\W |匹配任意一个非数字、字母或下划线，即[^0-9a-zA-Z_] |
|\b |匹配单词的开始或结束 |

###原子的筛选方式
|筛选方式 |描述 |
|:---: |:--- |
|丨 |匹配两个或者多个分支选择 |
|[] |匹配方括号中的任意一个原子 |
|\[^\] |匹配除方括号中的原子之外的任意字符 |

###示例练习
* 匹配'Duang~'和'duang~'

    `/Duang~|duang~/` 或者 `/[Dd]uange~/`

* 匹配用尖括号括起来的以'a'开头的字符串，如'<ab>','<a34>'

    `/<a[^>]+>/` '[^>]'为非'>'的字符

<h2 id="meta-characters">元字符(Meta-characters)</h2>

正则表达式的威力源于它可以在模式中拥有选择和重复的能力。一些字符被赋予特殊的涵义，使其不再单纯的代表自己，模式中的这种有特殊涵义的编码字符就称为_元字符_。

###用在方括号外的元字符
|元字符 |描述 |
|:---:|:---|
|\ |一般用于转义字符 |
|^ |断言目标的开始位置(多行模式下是行首) |
|$ |断言目标的结束位置(多行模式下是行尾) |
|. |匹配除换行符以外的任何字符 |
|[ |开始字符类定义 |
|] |结束字符类定义 |
|丨 |开始一个可选分支 |
|( |子组的开始标记 |
|) |子组的结束标记 |
|? |作为量词，表示0次或1次匹配。位于量词后面将改变量词的贪婪特性 |
|* |量词，0次或多次匹配 |
|+ |量词，1次或多次匹配 |
|{ |自定义量词开始标记 |
|} |自定义量词结束标记 |

###用在方括号内的元字符
|元字符 |描述 |
|:---:|:---|
|\ |转义字符 |
|^ |仅在作为第一个字符(方括号内)时，表明字符类取反 |
|- |标记字符范围 |

<h2 id="character_classes">字符类(Character Classes)</h2>

字符类的组成是由一对方括号包裹一些原子，它匹配字符类中定义的字符集合的其中一个。

使用 ^ 对字符类取反，表示匹配不是字符类中定义的字符集和中的任意一个。

POSIX字符类(使用`[:` 和 `:]`闭合)

|Character classes |描述 |
|:---: |:--- |
|alnum |字母和数字 |
|alpha |字母 |
|ascii |0 - 127的ascii字符 |
|blank |空格和水平制表符 |
|cntrl |控制字符 |
|digit |十进制数，同于\d |
|graph |打印字符，不包括空格 |
|lower |小写字母 |
|print |打印字符，包含空格 |
|punct |打印字符，不包括字母和数字 |
|space |空白字符，比\s多垂直制表符|
|upper |大写字母 |
|word |单词字符，同\w |
|xdigit |十六进制数字 |

###示例

```php
<?php
    $subject = 'abc[e]do^3';
    $pattern1 = '/[^abcd]/';
    // 匹配$subject中不为a/b/c/d的字符，^放在方括号中的第一个位置表示取反
    preg_match_all($pattern1, $subject, $matches1);
    p($matches1); // [['[', 'e', ']', 'o', '^', '3']]
    
    $pattern2 = '/[abcd^]/';
    // 匹配$subject中为a/b/c/d/^字符，方括号中如果^没有放在第一个位置，就被当做字符类的普通一员
    preg_match_all($pattern2, $subject, $matches2);
    p($matches2); // [['a', 'b', 'c', 'd', '^']]

    $subject = 'abcd]sas';
    $pattern3 = '/[ab]cd]/';
    // 匹配$subject中字符acd]或者bcd]，这里出现了两个]，第一个会被作为字符类的结束标记，第二个为普通字符
    preg_match_all($pattern3, $subject, $matches3);
    p($matches3); // [['bcd]']]

    $pattern4 = '/[]abcd]/';
    // 匹配 ]/a/b/c/d中的任意一个字符，将]放在字符类最左边时将作为普通字符，而不作为字符类的结束标记
    preg_match_all($pattern4, $subject, $matches4);
    p($matches4); // [['a', 'b', 'c', 'd', ']', 'a']]

    $pattern5 = '/[^]abcd]/';
    // 匹配不是]/a/b/c/d中的任意字符
    preg_match_all($pattern5, $subject, $matches5);
    p($matches5); // [['s', 's']]

    // 下面的写法会出错：编辑失败：缺失字符类的结束符]
    $pattern6 = '/[]abc/';
    preg_match_all($pattern6, $subject, $matches6);
?>
```

```php
<?php
    $subject = '34iiosd3d';
    // 匹配数字
    $pattern = '/[[:digit:]]/';
    preg_match_all($pattern, $subject, $matches);
    p($matches); // [['3', '4', '3']]
?>
```

<h2 id="repetition">量词/重复(Repetition)</h2>

用于指定前面的项的重复次数。

|量词 |描述 |
|:---: |:--- |
|{n} |表示其前面的原子恰好出现n次 |
|{n,} |表示其前面的原子最少出现n次 |
|{n,m} |表示其前面的原子最少出现n次,最多出现m次 |
|* |匹配任意次数的其之前的原子，即{0,} |
|+ |匹配1次或者多次其之前的原子，即{1,} |
|? |匹配0次或者1次其之前的原子，即{0,1} |

简单的例子：

* 匹配'aaa'：`/aaa/` 或者`/a{3}/`

* 匹配任意3个连续的英文字母：`/[a-zA-Z]{3}/`

* 匹配连续出现至少4次英文字母或数字或下划线的情况：`/[a-zA-Z0-9_]{4,}/` 或者 `/\w{4,}/`

* 匹配'https或http'：`/https|http/` 或者 `/https?/`

`{,6}`，这不是一个量词，只会被认为是普通字符，对其自身进行原文匹配。

`{0}`，它会导致行为是认为前面的项不存在。如`/h\d{0}/`，相当于`/h/`

量词默认情况下是进行贪婪匹配的:

```php
<?php
    $subject = '/*这是注释1*/这不是注释/*这是注释2*/';
    $pattern = '/\/\*.*\*\//'; // 用来匹配注释
    preg_match_all($pattern, $subject, $matches);
    p($matches); // [['*这是注释1*/这不是注释/*这是注释2*/']]
?>
```

在量词后面紧跟一个?标记，它可以使量词匹配变成懒惰模式。

```php
<?php
    $pattern2 = '/\/\*.*?\*\//';
    preg_match_all($pattern2, $subject, $matches);
    p($matches); // [['/*这是注释1*/', '/*这是注释2*/']]
?>
```

?标记的懒惰特性只出现在懒惰模式可以成功匹配的情况下：

```php
<?php
    $subject = 'a33a';
    $pattern = '/\w\d??\d\w/'; // \d?? 更倾向于不匹配
    preg_match_all($pattern, $subject, $matches); // 但是\d??如果不匹配数字的话将导致匹配失败，这时懒惰特性会消失
    p($matches); // [['a33a']]
?>
```

如果设置了`PCRE_UNGREEDY`选项，那么量词默认情况下为非贪婪的。通过?标记可以使其贪婪。



边界控制
---
|边界控制 |描述 |
|:---: |:--- |
|^ |匹配字符串开始的位置 |
|$ |匹配字符串结尾的位置 |
|() |匹配其中的整体为一个原子 |

<h2 id="subpatterns">子组/子表达式(Subpatterns)</h2>

子组通过圆括号分隔界定，并且它们可以嵌套。将一个模式中的一部分标记为子组主要是来做两件事情：

1. 将可选分支局部化。如`/cat(arcat|erpillar|)/`，可以匹配'cat'、'catarcat'和'caterpillar'。

2. 将子组设定为捕获子组。当整个模式匹配后，目标字符串中匹配子组的部分将会通过**pcre_exec()**的_ovector_参数回传给调用者。左括号从左往右出现的次序就是对应子组的下标(从1开始)，可以通过这些下标数字来获取捕获子模式匹配结果。

比如，使用模式`/((red|white) (king|queen))/`来匹配字符串'the red king'，模式匹配到得结果是['red king', 'red king', 'red', 'king']的形式，其中第0个元素是整个模式匹配的结果，后面的三个元素依次为三个子组匹配的结果。它们的下标分别为1，2，3。

|子组语法 |说明 |
|:---: |:--- |
|`(pattern)` |匹配pattern，并捕获文本到自动命名的组里 |
|`(?:pattern)` |匹配pattern，但不捕获匹配的文本，也不给此分组分配组号 |
|`(?<name>pattern)`/`(?'name'pattern)` |匹配pattern，并捕获文本到名称为name的组里 |

一些简单的示例：

* 匹配'Duang~'或者'duang~'：`/(D|d)uang~/`

* 匹配任意1-3个数字后面加一个'.'3次：`/(\d{1,3}\.){3}/`

* 匹配正确的ipv4地址：

    ```
    /((2[0-4]\d|25[0-5]|[01]?\d{1,2})\.){3}(2[0-4]\d|25[0-5]|[01]?\d{1,2})/

    // ============================================
    // 解释：
    // 2[0-4]\d 能够匹配的数的范围是200-249
    // 25[0-5] 能够匹配的数的范围是250-255
    // [01]?\d{1,2} 能够匹配的数的范围是0-199，但是有几种格式0，00，01，010.前面带前导0在ip地址中是被允许的
    // 所以整个(2[0-4]\d|25[0-5]|[01]?\d{1,2})匹配的是0-255
    ```

事实上，圆括号履行的两种功能并不总是有用的。经常我们会有一种需求需要使用子组进行分组，但又不需要(单独的)捕获它们。在子组定义的左括号后面紧跟字符串"?:"会使得该子组不被单独捕获，并且不会对其后子组序号的计算产生影响。

比如，使用模式`((?:red|white) (king|queen))`来匹配字符串'the white queen'，匹配到的结果会是['white queen', 'white queen', 'queen']，索引0的结果是整个表达式的匹配结果，后面两个是匹配的子组。捕获子组序号的最大值是99， 最大允许拥有的所有子组(包括捕获的和非捕获的)的数量为200。

也可以自己指定子表达式的**组名**。指定子表达式组名的语法：`(?<Word>\w+)` 或者 `(?'Word'\w+)` - 指定`\w+`子表达式的组名为'Word'，反向引用这个捕获的内容使用`\k<Word>`，所以上一个例子可以写成：`\b(?<Word>\w+)\b\s+\k<Word>\b`

有时候，需要多个匹配可以在一个正则表示中选用子组。为了让多个子组可以共用一个后向引用数字的问题，(?| 语法可以允许复制数字。

* 匹配'Sunday'：`/(?:(Sat)ur|(Sun))day/`。结果为[['Sunday'], [], ['Sun']]，'Sat'和'Sun'的匹配结果会分别在后向引用1和2中。

* 使用`/(?|(Sat)ur|(Sun))day/`来匹配时，'Sat'或'Sun'的匹配结果都只在后向引用1中，使用这种方式匹配'Sunday'的结果为[['Sunday'], ['Sun']]


修正模式
---
模式修正符号在正则表达式定界符之外使用(最后一个斜线'/'之后)，例如'/php/i'。其中'/php/'是一个正则表达式的模式，而'i'就是修正此模式所使用的修正符号，用来匹配时不区分大小写。

模式修正符可以调整正则表达式的解释，扩展了正则表达式在匹配、替换等操作时的某些功能，而且模式修正符号也可以组合使用，更增强了正则表达式的处理能力。例如：'/php/Uis'，3个模式修正符一起使用。

模式修正符对编写简短洁净的表达式大有帮助。

|匹配模式 |描述 |
|:---: |:--- |
|U |使量词默认为非贪婪的，通过量词后紧跟？的方式可以使其成为贪婪的。 |
|i |忽略英文字母大小写 |
|x |忽略空白 |
|s |让与字符'.'匹配包括换行符在内的所有字符 |
|m |将字符串视为多行。默认的正则表达式开始'^'和结束'$'将目标字符串作为单一的一"行"字符(尽管里面很可能有换行符)。如果在修饰符中加上'm'，那么开始和结束将会指字符串的每一行，每一行的开头就是'^'，结尾就是'$' |

###贪婪匹配与懒惰匹配
* 贪婪匹配 - 匹配结果存在歧义时取其长(默认)
* 懒惰匹配 - 匹配结果存在歧义时取其短

```php
<?php
    // 定义一个打印输出函数
    function p($msg) {
        echo '<pre style="color:red;">';
        print_r($msg);
    }

    $pattern = '/myFriends.+0/'; // 要匹配的正则模式
    $subject = 'myFriends__00000000'; // 需要查找的文本
    $matches = [];
    preg_match($pattern, $subject, $matches);
    p($matches); // 默认使用贪婪模式，匹配结果为 myFriends__00000000

    // 使用贪婪模式匹配
    $pattern = '/myFriends.+0/U'; // 这是.+将进行最少匹配
    preg_match($pattern, $subject, $matches);
    p($matches); // 匹配结果是 myFriends__0
?>
```

###忽略英文字母的大小写匹配

```php
<?php
    $pattern = '/myfriends.+0/';
    $subject = 'myFriends__00000000';
    $matches = [];
    preg_match($pattern, $subject, $matches);
    p($matches); // 不能匹配到任何内容

    $pattern = '/myfriends.+0/Ui'; // 忽略大小写进行非贪婪匹配
    preg_match($pattern, $subject, $matches);
    p($matches); // myFriends__0
?>
```

###忽略空白字符

```php
<?php
    $pattern = '/my friend  s.+0/Uix';
    $subject = 'myFriends__00000000'
    $matches = [];
    preg_match($pattern, $subject, $matches);
    p($matches); // myFriends__0
?>
```

反向引用
---
使用小括号指定了一个子表达式后，匹配的这个子表达式的内容需要做一些其它进一步的处理，如重复搜索前面某子表达式匹配的内容。

默认情况下，每个子表达式(分组)自动拥有一个组号，规则是：从左往右，以分组的左括号为标志，第一个出现的组号为1，第二个为2，一次类推。`\b(\w+)\b\s+\1\b`可以匹配重复的单词，如'go go'， 'everyone everyone'。



断言
---
|零宽断言语法 |说明 |
|:---:|:---|
|`(?=exp)` |匹配exp前面的位置 |
|`(?<=exp)` |匹配exp后面的位置 |
|`(?!exp)` |匹配后面跟的不是exp的位置 |
|`(?<!exp)` |匹配前面不是exp的位置 |

###零宽断言
上面的四个表达式用于查找在某些内容(但并不包括这些内容)之前或之后的东西，也就是说他们像\b，^，$那样用于指定一个位置，这个位置应该满足一定的条件(即断言)，因此它们也被成为**零宽断言**。

`(?=exp)`，也叫作**零宽度预测先行断言**，它断言自身出现的位置的后面能匹配表达式exp。比如`\b\w+(?=ing\b)`，匹配_以ing结尾的单词的前面部分(除了ing以外的部分)_，如查找"I'm singing while you're dancing."时，它会匹配sing和danc。

`(?<=exp)`，也叫**零宽度正回顾后发断言**，它断言自身出现的位置的前面能匹配表达式exp。比如`(?<=\bre)\w+\b`会匹配_以re开头的单词的后半部分(除了re以外的部分)_，如查找"reading a book"时，它匹配ading。

假如你想要给一个很长的数字中每三位间加一个逗号(当然就从右边加起来)，你可以这样查找需要在前面和里面添加逗号的部分：`((?<=\d)\d{3})+\b`，

使用两种断言：`(?<=\s)\d+(?=\s)`匹配_以空白符间隔的数字(不包括两端的空白符)_

###负向零宽断言
前面我们提到过查找 不是某个字符或不在某个字符类里的字符。但是如果我们只是想要确保某个字符没有出现，但并不想去匹配它时怎么办？如：我们想查找这样的单词--它里面出现了字母q，但是q后面跟的不是字母u的单词。`\b\w*q[^u]\w*\b`匹配包含q字母且q后面不是u的单词。但是像'Iraq,Benq'这样的字符也能够被匹配。负向零宽断言能解决这样的问题，因为它只匹配一个位置，并不消费任何字符。`\b\w*q(?!u)\w*\b`

零宽度负预测先行断言`(?!exp)`，断言此位置的后面不能匹配表达式exp。例如：`\d{3}(?!\d)`匹配三位数字，而且这三位数字的后面不能是数字；`\b((?!abc)\w)+\b`匹配不包含连续字符串abc的单词

还可以使用`(?<!exp)` - 零宽度负回顾后发断言来断言此位置的前面不能匹配表达式exp：`(?<![a-z])\d{7}`匹配前面不是小写字母的七位数字。

`(?<=<(\w+)>).*(?=<\/\1>)` 匹配不包含属性的简单HTML标签内里的内容。

注释
---
小括号的另一种用途是通过语法`(?#comment)`来包含注释。如`2[04]\d(?#200-249)|25[0-5](?#250-255)|[01]\d{1,2}(?#0-199)`。

要包含注释的花最好启用"忽略模式里的空白符"选项，这样在编写表达式的时候能任意添加空格，Tab，换行，而实际使用时这些都将被忽略。启用这个选项后，在#后面到这一行结束的所有文本都将被当成注释忽略掉。如：

```
(?<=        # 断言要匹配的文本的前缀
<(\w+)>     # 查找尖括号括起来的字母或数字(HTML/XML标签)
)           # 前缀结束
.*          # 匹配任意文本
(?=         # 断言要匹配的文本的后缀
<\/\1>      # 查找尖括号括起的内容：前面是一个'/'，后面是先前捕获的标签
)           # 后缀结束
```

贪婪与懒惰
---
当正则表达式中包含能接受重复的限定符时，通常的行为是(在使整个表达式能得到匹配的前提下)匹配尽可能多的字符。以这个表达式为例`a.*b`，它将会匹配_最长的以a开始，以b结束的字符串_。

时常我们更需要的是懒惰匹配，也就是尽可能少的字符前面给出的限定符都可以被转化为懒惰匹配模式，只要在它后面加上一个问号?。这样`.*?`就意味着_匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复_。 `a.*?b`用来匹配'aabab'的话，它将会匹配'aab(第1-3个字符)'和'ab(第4-5个字符)'。

为什么第一个匹配的是'aab(第1-3个字符)'，而不是'ab(第2-3个字符)'？简单地说，这是因为正则表达式有另一条规则，它比贪婪与懒惰这条规则的优先级更高 - 最先开始的匹配拥有最高的优先权。

|懒惰限定符语法 |描述 |
|:---: |:--- |
|*? |重复任意次，但尽可能少重复 |
|+? |重复1次或更多次，但尽可能少重复 |
|?? |重复0次或1次，但尽可能少重复 |
|{n,m}? |重复n次到m次，但尽可能少重复 |
|{n,}? |重复至少n次，但尽可能少重复 |

平衡组/递归匹配
---
有时我们需要匹配像'(100*(50+15))'这样的可嵌套的层次性结构，这时简单地使用`\(.+\)`则只会匹配到最左边的左括号和最右边的右括号之间的内容(贪婪模式下)。但是如果是这样的字符串'(5/(3+2)))'，左括号与右括号不等，但我们想匹配的左括号与右括号一样多的最长内容，该怎么办呢？

这里需要使用到以下语法：

* `(?'group')` 把捕获的内容命名为group，并压入堆栈(stack)
* `(?'-group')` 从堆栈上弹出最后压入堆栈的名为group的捕获内容，如果堆栈本来为空，则本分组的匹配失败
* `(?(group)yes|no)` 如果堆栈上存在以名为group的捕获内容的话，继续匹配yes部分的表达式，否则继续匹配no部分
* `(?!)` 零宽负向先行断言，由于没有后缀表达式，试图匹配总是失败

我们需要做的是每碰到了左括号，就在压入一个'Open'，每碰到一个右括号，就弹出一个，到了最后就看看堆栈是否为空--如果不为空那就证明左括号比右括号多，那匹配就应该失败。正则表达式引擎会进行回溯(放弃最前面或最后面的一些字符)，尽量使整个表达式得到匹配。

```
<                   # 最外层的左括号
    [^<>]*          # 最外层的左括号后面的不是括号的内容
    (
        (
            (?'Open'<)  # 碰到了左括号，在黑板上写一个'Open'
            [^<>]*      # 匹配左括号后面的不是括号的内容
        )+
        (
            (?'-Open'>) # 碰到了右括号，就擦掉一个'Open'
            [^<>]*      # 匹配右括号后面不是括号的内容
        )+
    )*
    (?(Open)(?!))   # 在遇到最外层的右括号前面，判断黑板上还有没有没擦掉的'Open'；如果还有，则匹配失败
>                   # 最外层的右括号
```

PCRE 函数
---
1. <p id="preg_quote">preg_quote - 转义正则表达式字符</p>

    **说明**

    _string_ `preg_quote`(_string_ $str [, _string_ $delimiter = NULL])

    `preg_quote()`需要参数str并向其中每个正则表达式语法中的字符前增加一个反斜线。这通常用于一些运行时的字符串，需要将其作为正则表达式来使用的时候。

    正则表达式特殊字符有：`. \ + * ? [ ^ ] $ ( ) { } = ! < > | : -`

    **参数**
    
    _str_： 输入字符串

    _delimiter_： 如果指定了可选参数delimiter，它也会被转义。这通常用于转义PCRE函数使用的分隔符。'/'是最通用的分隔符。

    **返回值**

    返回转义后的字符串

    **示例**

    ```php
    <?php
        $keywords = '$40 for a g3/400';
        $pattern = preg_quote($keywords);
        echo $pattern; // \$40 for a g3/400. $会被转义，/不是特殊字符不会被转义

        // 假使我们需要使用'/'来作为分隔符，那么我们需要对$keywords中的'/'转义
        $pattern = preg_quote($keywords, '/');
        echo $pattern; // \$40 for a g3\/400
    ?>
    ```

    ```php
    <?php
        // 有这样一个字符串'\d is a number'，要匹配'\d'，直接使用preg_quote('\d')即可
        $subject = '\d is a number';
        $pattern = '/' . preg_quote('\d') . '/';
        p(preg_replace($pattern, '5', $subject)); // 5 is a number
    ?>
    ```

2. <p id="preg_filter">preg_filter - 执行一个正则表达式搜索和替换</p>

    **说明**

    _mixed_ `preg_filter`(_mixed_ $pattern, _mixed_ $replacement, _mixed_ $subject [, int $limit = -1 [, int &$count]])

    `preg_filter()`等价于`preg_replace()`除了它仅仅返回(可能经过转化)与目标匹配的结果。

    **返回值**

    如果subject是一个数组，返回一个数组，其他情况返回一个字符串。

    如果没有找到匹配或者发生了错误，当subject是数组时返回一个空数组，其他情况返回NULL。

    **示例**

    ```php
    <?php
        // 比较preg_filter()与preg_replace()
        $subject = ['1', 'a', '2', 'b', '3', 'A', 'B', '4'];
        $pattern = ['/\d/', '/[a-z]/', '/[1a]/'];
        $replace = ['A:$0', 'B:$0', 'C:$0'];
        p(preg_filter($pattern, $replace, $subject));
        // [0 => 'A:C:1', 1 => 'B:C:a', 2 => 'A:2', 3 => 'B:b', 4 => 'A:3', 7 => 'A:4']

        p(preg_replace($pattern, $replace, $subject));
        // [0 => 'A:C:1', 1 => 'B:C:a', 2 => 'A:2', 3 => 'B:b', 4 => 'A:3', 5 => 'A', 6 => 'B', 7 => 'A:4']
    ?>
    ```

3. <p id="preg_grep">preg_grep - 返回匹配模式的数组条目</p>

    **说明**

    _array_ `preg_grep`(_string_ $pattern, _array_ $input [, int $flags = 0])

    返回给定数组input中与模式pattern匹配的元素组成的数组。

    **参数**

    _pattern_： 要搜索的模式，字符串形式。

    _input_： 输入数组。

    _flags_： 如果设置为`PREG_GREP_INVERT`，这个函数返回输入数组中与给定模式pattern不匹配的元素组成的数组。

    **返回值**

    返回使用input中key做索引的数组。

    **示例**

    ```php
    <?php
        $array = ['0.12', '.3', '88', '4a', 7.8];
        $fl_array = preg_grep('/^(\d+)?\.\d+$/', $array);
        p($fl_array); // [0 => '0.12', 1 => '.3', 4 => 7.8]

        $other_array = preg_grep('/^(\d+)?\.\d+$/', $array, PREG_GREP_INVERT);
        p($other_array); // [2 => '88', 3 => '4a']
    ?>
    ```

4. <p id="preg_match">preg_match - 执行一个正则表达式匹配</p>

    **说明**

    _int_ `preg_match`(_string_ $pattern, _string_ $subject [, _array_ &$matches [, _int_ $flag = 0 [, _int_ $offset = 0]]])

    搜索subject与pattern给定的正则表达式的一个匹配。

    **参数**

    _pattern_： 要搜索的模式，字符串类型。

    _subject_： 输入字符串。

    _matches_： 如果提供了参数matches，它将被填充为搜索结果。`$matches[0]`将包含完整模式匹配到的文本，`$matches[1]`将包含第一个捕获子组匹配到的文本，以此类推。

    _flags_： flags如果被设置为`PREF_OFFSET_CAPTURE`，对于每一个出现的匹配返回时都会附加字符串偏移量(相对于目标字符串)。注意：这会改变填充到matches参数的数组，使其每个元素成为一个由第0个元素是匹配到的字符串，第1个元素是该匹配字符串在目标字符串subject中的偏移量。

    _offset_： 通常从目标字符串的开始位置开始。可选参数offset用于指定从目标字符串的某个未知开始搜索(单位是字节)。

    **返回值**

    `preg_match()`返回pattern的匹配次数。它的值将是0次(不匹配)或1次，因为`preg_match()`在第一次匹配后将会停止搜索。

    **示例**
    
    ```php
    <?php
        if (preg_match('/php/i', 'PHP is the web scripting language of choice.')) {
            echo 'A match was found';
        } else {
            echo 'A match was not found';
        }
    ?>
    ```

    ```php
    <?php
        // 从URL中获取主机名称
        preg_match('@^(?:http://)?([^/]+)@i', 'http://www.php.net/index.html', $matches);
        $host = $matches[1]; // www.php.net

        // 获取主机名称的后面两部分
        preg_match('/[^.]+\.[^.]+$/', $host, $matches); // [^.] 相当于 [^/.]
        p($mathces[0]); // php.net
    ?>
    ```

    ```php
    <?php
        // 使用命名子组
        $str = 'foobar: 2008';
        preg_match('/(?<name>\w+): (?<digit>\d+)/', $str, $matches);
        p($matches); // [0 => 'foobar: 2008', 'name' => 'foobar', 1 => 'foobar', digit => '2008', 2 => '2008']
    ?>
    ```

5. <p id="preg_match_all">preg_match_all - 执行一个全局正则表达式匹配</p>

    **说明**

    _int_ `preg_match_all`(_string_ $pattern, _string_ $subject [, _array_ &$matches [, _int_ $flags = `PREG_PATTERN_ORDER` [, _int_ $offset = 0]]])

    搜索subject中所有匹配pattern给定正则表达式的匹配结果并且将它们以flag指定顺序输出到matches中。

    在第一个匹配找到后，子序列继续从最后一次匹配位置搜索。

    **参数**

    _pattern_： 要搜索的模式，字符串形式。

    _subject_： 输入字符串。

    _matches_： 多维数组，作为输出参数输出所有匹配结果，数组排序通过flags指定。

    _flags_： 可以结合下面标记使用(注意不能同时使用`PREG_PATTERN_ORDER`和`PREG_SET_ORDER`)：
    * `PREG_PATTERN_ORDER`：结果排序为`$matches[0]` 保存完整模式的所有匹配，`$matches[1]` 保存第一个子组的所有匹配，依次类推。

        ```php
        <?php
            preg_match_all('|<[^>]+>(.*)</[^>]+>|U', '<b>example:</b><div align=left>this is a test</div>', $out, PREG_PATTERN_ORDER);
            p($out); // [['<b>example:</b>', '<div align=left>this is a test</div>'], ['example:', 'this is a test']]
            // ========================================================
            // $out[0] 是包含匹配完整模式的字符串的数组，$out[1] 是包含闭合标签内的字符串的数组。
        ?>
        ```
    * `PREG_SET_ORDER`：结果排序为`$matches[0]`包含第一次匹配得到的所有匹配(包含子组)，`$matches[1]`是包含第二次匹配到的所有匹配(包含子组)的数组，以此类推。

        ```php
        <?php
            preg_match_all('|<[^>]+>(.*)</[^>]+>|U', '<b>example: </b><div align=\"left\">this is a test</div>', $out, PREG_SET_ORDER);
            p($out); // [['<b>example:</b>', 'example'], ['<div align=\"left\">this is a test</div>', 'this is a test']]
        ?>
        ```
    * `PREG_OFFSET_CAPTURE`：如果这个标记被传递，每个发现的匹配返回时会增加它相对目标字符串的偏移量。注意这会改变matches中的每一个匹配结果字符串元素，使其成为一个第0个元素为匹配结果字符串，第1个元素为匹配结果字符串在subject中的偏移量。

    _offset_  通常，查找时从目标字符串的开始位置开始。可选参数offset用于从目标字符串中制定位置开始搜索(单位是字节)。

    **返回值**

    返回完整匹配次数(可能是0)，或者如果发生错误返回FALSE。

    **示例**

    ```php
    <?php
        // 查找所有文本中的电话号码
        preg_match_all('/\(? (\d{3})? \)? (?(1) [\-\s]) \d{3}-\d{4}/x', 'Call 555-1212 or 1-800-555-1212', $phones);
        p($phones); // [['555-1212', '800-555-1212'], ['', '800']]
    ?>
    ```

6. <p id="preg_replace">preg_replace</p>

    **说明**

    _mixed_ `preg_replace`(_mixed_ $pattern, _mixed_ $replacement, _mixed_ $subject [, _int_ $limit = -1 [, _int_ &$count]])

    搜索subject中匹配pattern的部分，以replacement进行替换。

    **参数**
    
    _pattern_： 要搜索的模式。可以是一个字符串或字符串数组。

    _replacement_： 用于替换的字符串或字符串数组。如果这个参数是一个字符串，并且pattern是一个数组，那么所有的模式都使用这个字符串进行替换。如果pattern和replacement都是数组，每个pattern使用replacement中对应的元素进行替换。如果replacement中的元素比pattern中的少，多出来的pattern使用空字符串进行替换。

    _subject_： 要进行搜索和替换的字符串或字符串数组。如果subject是一个数组，搜索和替换会在subject的每一个元素上进行，并且返回值也会是一个数组。

    _limit_： 每个模式在每个subject上进行替换的最大次数，默认是-1(无限)。

    _count_： 如果指定，将会被填充为完成的替换次数。

    **返回值**

    如果subject是一个数组，`preg_replace()`返回一个数组，其它情况下返回一个字符串。

    如果匹配被查找到，替换后的subject被返回，其它情况下返回没有改变的subject。如果发生错误，返回NULL。

    **示例**

    ```php
    <?php
        // 使用后向引用紧跟数值原文
        $string = 'April 15, 2013';
        $pattern = '/(\w+) (\d+), (\d+)/i';
        $replacement = '${1}1,$3'; // 使用{}分开两个1
        echo preg_replace($pattern, $replacement, $string); // April1,2013
    ?>
    ```

    ```php
    <?php
        // preg_replace()中使用基于索引的数组
        $string = 'The quick brown fox jumped over the lazy dog.';
        $patterns = ['/quick/', '/brown/', '/fox/'];
        $replacements = ['bear', 'black', 'slow'];
        echo preg_replace($patterns, $replacements, $string); // The bear black slow jumped over the lazy dog.
    ?>
    ```

    ```php
    <?php
        // 替换一些值
        $patterns = ['/(19|20)(\d{2})-(\d{1,2})-(\d{1,2})/', '/^\s*{(\w+)}\s*=/'];
        $replace = ['\3/\4/\1\2', '$\1 ='];
        echo preg_replace($patterns, $replace, '{startDate} = 1999-5-27'); // $startDate = 5/27/1999
    ?>
    ```

    ```php
    <?php
        // 剥离多余的空白字符
        $str = 'foo    o';
        echo preg_replace('/\s\s+/', ' ', $str);
    ?>
    ```

    ```php
    <?php
        // 使用参数count
        $count = 0;
        echo preg_replace(['/\d/', '/\s/'], '*', 'xp 4 to', -1, $count); // xp***to
        echo $count; // 3
    ?>
    ```

7. <p id="preg_split">preg_split - 通过一个正则表达式分隔字符串</p>

    **说明**

    _array_ `preg_split`(_string_ $pattern, _string_ $subject [, _int_ $limit = -1 [, _int_ $flags = 0]])

    通过一个正则表达式分隔给定字符串。

    **参数**

    _pattern_： 用于搜索的模式，字符串形式。

    _subject_： 输入字符串。

    _limit_： 如果指定，将限制分隔得到的子串最多只有limit个，返回的最后一个子串将包含所有剩余部分。

    limit值为-1，0或null时都代表"不限制"，作为PHP的标准，你可以使用null跳过对flags的设置。

    _flags_： 可以是`PREG_SPLIT_NO_EMPTY`、`PREG_SPLIT_DELIM_CAPTURE`、`PREG_SPLIT_OFFSET_CAPTURE`中的组合(位或运算)

        * `PREG_SPLIT_NO_EMPTY`：如果这个标记被设置，`preg_split()`将返回分隔后的非空部分。

        * `PREG_SPLIT_DELIM_CAPTURE`：如果这个标记被设置，用于分隔的模式中的括号表达式将被捕获并返回。

        * `PREG_SPLIT_OFFSET_CAPTURE`：如果这个标记被设置，对于每一个出现的匹配返回时将会附加字符串偏移量。注意：这将会改变返回数组中的每一个元素，使其每个元素成为一个由第0个元素为分隔后的子串，第1个元素为该子串在subject中的偏移量组成的数组。

    **返回值**

    返回一个使用pattern边界分隔subject后得到的子串组成的数组。

    **示例**

    ```php
    <?php
        // 获取搜索字符串的部分
        $keywords = preg_split('/[\s,]+/', 'hypertext language, programming');
        p($keywords); // ['hypertext', 'language', 'programming']
    ?>
    ```

    ```php
    <?php
        // 将一个字符串分隔为组成它的字符
        $str = 'string';
        $chars = preg_split('//', $str, -1, PREG_SPLIT_NO_EMPTY);
        p($chars); // ['s', 't', 'r', 'i', 'n', 'g']
    ?>
    ```

    ```php
    <?php
        // 分隔一个字符串并获取每部分的偏移量
        $str = 'hypertext language programming';
        $chars = preg_split('/ /', $str, -1, PREG_SPLIT_OFFSET_CAPTURE);
        p($chars); // [['hypertext', 0], ['language', 10], ['programming', 19]]
    ?>
    ```

参考文章
---
1. [《正则表达式30分钟入门教程》](http://deerchao.net/tutorials/regex/regex.htm) - **deerchao** _2013-01-10_
2. [慕课网 - 《鬼斧神工之正则表达式》](http://imooc.com/learn/350) - **badguy**
3. [《PHP中文文档》](http://php.net/manual/zh/book.pcre.php)

推荐书籍
---
1. 《精通正则表达式》 - Jeffrey Firedl



























